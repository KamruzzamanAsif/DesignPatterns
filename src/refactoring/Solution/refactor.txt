>>>>>> FizzBuzz.java <<<<<<<<
1. Inappropriate naming smell:
    Method name "say" doesn't make any sense about its functionality
    So, I changed the name to "getStringOnBasisOfNumber"
2. Long method smell:
    The method "say" is hard to quickly comprehend
    So, I extract method isFactorOfThree() and isFactorOfFive()
3. Data redundancy:
    The variable "strReturn" is redundant here
    We can simply return our desired string directly
4. Comment smell:
    The class has some comments to understand its responsibility
    I increased the understanding of its responsibility through
    the above described actions in point 1, 2, and 3.


>>>>>> PlaintextToHtmlConverter <<<<<<<
1. Black Sheep smell:
    i. The method "read" is noticeably different from other methods in
        the class. So, I made a new class named "FileReader" and added
        a "readFile" method for reading files which is being called from
        our main class.
    ii. Resetting the list "convertedLine" in method "addNewLine()" is not
        appropriate. So I made a new method named "resetConvertedLine" for
        this task.
2. Redundant method:
    The method "toHtml()" is redundant I think as I added a Main class
    and FileReader class. Now toHtml() method just returns the encoded
    html but that can be achieved directly from "basicHtmlEncode()" method.
3. Inappropriate naming smell:
    i.  The variable "source" inappropriate to refer plain text. I rename this
        as "plainText"
    ii. The variable "result" is renamed to "htmlText" for better understanding
4. Comment smell:
    Both stashNextCharacterAndAdvanceThePointer() and addNewLine() method has
    comments to understand their functionality. The former is solved in point 5(i)
    and later is solved in point 1(ii)
5. Long method smell:
    i. The "basicHtmlEncode()" method is hard to quickly comprehend and
        the lines of code is large. Here, if we add a for each loop to
        read characters form out plainText then it reduces the problem.
        As for this:
            * There is no need of the method "stashNextCharacterAndAdvanceThePointer()"
               we can safely remove it.
            * There is no need of the variable "characterToConvert", "character", and "i" anymore
            * And no need to check the break condition every time we iterate the loop
    ii. The variable "finalResult" is unnecessary here. We can use inline variable
        instead of this.

>>>>>> TriviaGame <<<<<<<
1. Large Class smell:
    There is seen many instances variable in our TriviaGame which makes it complex to
    understand the responsibility of it. So, I introduced 2 new classes "Player" and
    "Question" to increase understanding.
2. Primitive obsession:
    This can be seen in the Linked lists and Arrays used in our class TriviaGame
    This is solved in point 1.
3. Redundancy:
    i. Redundant method "createRockQuestion" which is solved in class "Question"
    ii. "howManyPlayers()" is a redundant method we can just remove it
4. Inappropriate naming smell:
    i. method name "add()" is inappropriate which adds player. I rename it "addPlayer()"
    ii. the parameter name "roll" in roll() method should be "dice" so I changed it
5. Long method smell:
    i. The method "roll()" is hard to quickly comprehend. I extracted a new method
       "changeLocation()"
    ii. "currentCategory()" is a long method smell which is resolved as "getCurrentCategory()"
        in Player class
    iii. "wasCorrectlyAnswered()" is a long method. I extracted "updateCurrentPlayer()" method
         and used "incrementPurse()" method from Player class
    iv. "wrongAnswer()" is a large method. I extracted "updateCurrentPlayer()" and used
        "setInPenaltyBox()" method from Player class.
6. Duplicate Code smell:
    In method "wasCorrectlyAnswered()" the code duplication was found. So, I removed the
    duplicate part and restructured the method. Some other changes were made (point 5(iii))